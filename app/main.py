from __future__ import annotations

import os
import sys
from pathlib import Path

from dotenv import load_dotenv
import streamlit as st

# Ensure project root on sys.path so `app` package imports work when running `streamlit run app/main.py`
_ROOT = Path(__file__).resolve().parent.parent
if str(_ROOT) not in sys.path:
    sys.path.insert(0, str(_ROOT))

# Local imports
from app.core import storage
from app.core import ui as core_ui
from app.core.models_dev import cache_provider_logo


def _get_active_profile() -> tuple[str, str | None]:
    """Resolve the active model/profile and logo from DB or env."""
    p = storage.get_active_provider()
    if p:
        name = p.model_id or p.name
        logo = p.logo_path
        # If not stored but catalog has provider, try to cache
        if not logo and p.catalog_caps_json and isinstance(p.catalog_caps_json, dict):
            provider = p.catalog_caps_json.get("provider")
            if isinstance(provider, str):
                logo = cache_provider_logo(provider)
        return name, logo
    # fallback
    try:
        profile = st.secrets.get("APP_PROFILE")  # type: ignore[attr-defined]
    except Exception:
        profile = None
    name = str(profile) if profile else os.getenv("APP_PROFILE", "Default")
    return name, None


def _ensure_runtime_dirs() -> None:
    for d in ("data", "export", "app/assets"):
        Path(d).mkdir(parents=True, exist_ok=True)


def main() -> None:
    load_dotenv()
    st.set_page_config(
        page_title="Images -> JSON",
        page_icon="🧩",
        layout="wide",
        initial_sidebar_state="expanded",
    )

    # Ensure folders exist and database is initialized
    _ensure_runtime_dirs()
    storage.init_db()

    # Sidebar: navigation is auto-generated by Streamlit's pages.
    with st.sidebar:
        st.markdown("#### Navigation")
        st.markdown("<hr>", unsafe_allow_html=True)
        prof_name, logo = _get_active_profile()
        core_ui.status_chip("Active Model", prof_name, logo_path=logo)

    # Clean title with muted subtitle
    st.title("🧩 Images -> JSON")
    st.markdown(
        '<p style="color: #6b7280; font-size: 1.1rem; margin-top: -10px; margin-bottom: 30px;">'
        'Transform images into structured data with AI-powered extraction'
        '</p>',
        unsafe_allow_html=True
    )
    
    # Welcome section in container
    with st.container(border=True):
        st.markdown("### 🚀 Getting Started")
        st.markdown("""
        1. **📤 Upload & Process** - Upload images and extract structured data
        2. **⚙️ Settings** - Configure AI models and manage templates
        
        **Quick Start:** Upload images -> Select template -> Process -> Export results
        """)
        
        # Quick stats if we have data
        try:
            templates = storage.list_templates()
            keys = storage.list_provider_keys()
            st.markdown(f"**Status:** {len(templates)} templates • {len(keys)} providers with API keys")
        except Exception:
            pass


if __name__ == "__main__":
    main()
